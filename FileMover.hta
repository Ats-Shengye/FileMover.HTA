<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>ファイル一括移動ツール</title>
    <HTA:APPLICATION 
        ID="FileBatchMover"
        APPLICATIONNAME="ファイル一括移動ツール"
        BORDER="thick"
        BORDERSTYLE="raised"
        CAPTION="yes"
        ICON=""
        MAXIMIZEBUTTON="no"
        MINIMIZEBUTTON="yes"
        SHOWINTASKBAR="yes"
        SINGLEINSTANCE="yes"
        SYSMENU="yes"
        WINDOWSTATE="normal">
    <style>
        body {
            font-family: "Meiryo UI", sans-serif;
            font-size: 12px;
            margin: 10px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 500px;
            background-color: white;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .form-group {
            margin-bottom: 10px;
        }
        .form-group label {
            display: block;
            margin-bottom: 3px;
            font-weight: bold;
        }
        .form-group input, .form-group select {
            width: 95%;
            padding: 3px;
            border: 1px solid #ccc;
        }
        .form-group textarea {
            width: 95%;
            height: 150px;
            padding: 3px;
            border: 1px solid #ccc;
            font-family: "Consolas", monospace;
            font-size: 11px;
        }
        .button-group {
            text-align: center;
            margin-top: 15px;
        }
        .button-group button {
            margin: 0 5px;
            padding: 8px 15px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            cursor: pointer;
        }
        .button-group button:hover {
            background-color: #e9e9e9;
        }
        .checkbox-group {
            margin: 5px 0;
        }
        .path-input {
            width: 85%;
            display: inline-block;
        }
        .browse-btn {
            width: 13%;
            padding: 3px;
            display: inline-block;
            margin-left: 2px;
        }
        .file-list-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3px;
        }
        .update-btn {
            padding: 2px 8px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <h3>ファイル一括移動ツール</h3>
        
        <div class="form-group">
            <label>日付</label>
            <input type="text" id="dateField" readonly>
        </div>
        
        <div class="form-group">
            <label>移動元</label>
            <input type="text" id="sourceFolder" class="path-input">
            <button type="button" class="browse-btn" onclick="selectSourceFolder()">フォルダ選択</button>
        </div>
        
        <div class="form-group">
            <label>移動先</label>
            <input type="text" id="destinationFolder" class="path-input" value="F:\">
            <button type="button" class="browse-btn" onclick="selectDestinationFolder()">フォルダ選択</button>
        </div>
        
        <div class="checkbox-group">
            <input type="checkbox" id="renameOption" onchange="toggleRenameInput()">
            <label for="renameOption">リネーム（オプション） 有効化する</label>
        </div>
        
        <div class="form-group" id="renameInputGroup" style="display: none;">
            <label>新しいファイル名（拡張子除く）</label>
            <input type="text" id="newFileName" placeholder="例: 会計伝票">
        </div>
        
        <div class="form-group">
            <label>ファイル形式</label>
            <select id="fileTypeFilter">
                <option value="pdf">pdf</option>
                <option value="xlsx">xlsx</option>
                <option value="docx">docx</option>
                <option value="jpg">jpg</option>
                <option value="png">png</option>
                <option value="txt">txt</option>
                <option value="*">すべて</option>
            </select>
        </div>
        
        <div class="form-group">
            <label>ファイル一覧</label>
            <div class="file-list-header">
                <span></span>
                <button type="button" class="update-btn" onclick="updateFileList()">リストの更新</button>
            </div>
            <textarea id="fileList" placeholder="ファイル一覧がここに表示されます。移動したくないファイルの行は削除してください。"></textarea>
        </div>
        
        <div class="button-group">
            <button type="button" onclick="startMove()">移動開始</button>
        </div>
    </div>

<script>
// === 設定エリア（メモ帳で編集可能） ===
var DEFAULT_DESTINATION = "F:\\"; // デフォルト移動先フォルダ
var SUPPORTED_EXTENSIONS = ["pdf", "xlsx", "docx", "jpg", "png", "txt"]; // 対応拡張子
// === 設定エリア終了 ===

var fso = new ActiveXObject("Scripting.FileSystemObject");
var shell = new ActiveXObject("Shell.Application");

// 初期化
window.onload = function() {
    document.getElementById("dateField").value = getCurrentDate();
};

// リネーム入力欄の表示/非表示切り替え
function toggleRenameInput() {
    var renameOption = document.getElementById("renameOption").checked;
    var renameInputGroup = document.getElementById("renameInputGroup");
    
    if (renameOption) {
        renameInputGroup.style.display = "block";
    } else {
        renameInputGroup.style.display = "none";
    }
}

// 現在日付取得
function getCurrentDate() {
    var now = new Date();
    var year = now.getFullYear();
    var month = String(now.getMonth() + 1).padStart(2, '0');
    var day = String(now.getDate()).padStart(2, '0');
    return year + "/" + month + "/" + day;
}

// フォルダ選択ダイアログ
function selectSourceFolder() {
    var folder = shell.BrowseForFolder(0, "移動元フォルダを選択してください", 0);
    if (folder != null) {
        document.getElementById("sourceFolder").value = folder.self.Path;
        updateFileList();
    }
}

function selectDestinationFolder() {
    var folder = shell.BrowseForFolder(0, "移動先フォルダを選択してください", 0);
    if (folder != null) {
        document.getElementById("destinationFolder").value = folder.self.Path;
    }
}

// ファイル一覧更新
function updateFileList() {
    var sourceFolder = document.getElementById("sourceFolder").value;
    var fileType = document.getElementById("fileTypeFilter").value;
    var fileListArea = document.getElementById("fileList");
    
    if (!sourceFolder) {
        alert("移動元フォルダを選択してください。");
        return;
    }
    
    if (!fso.FolderExists(sourceFolder)) {
        alert("指定されたフォルダが存在しません。");
        return;
    }
    
    try {
        var folder = fso.GetFolder(sourceFolder);
        var files = new Enumerator(folder.files);
        var fileList = [];
        
        for (; !files.atEnd(); files.moveNext()) {
            var file = files.item();
            var ext = fso.GetExtensionName(file.Name).toLowerCase();
            
            if (fileType === "*" || ext === fileType) {
                fileList.push(file.Name);
            }
        }
        
        fileListArea.value = fileList.join("\n");
        
    } catch (e) {
        alert("ファイル一覧の取得中にエラーが発生しました: " + e.message);
    }
}

// ファイル移動処理
function startMove() {
    var sourceFolder = document.getElementById("sourceFolder").value;
    var destinationFolder = document.getElementById("destinationFolder").value;
    var fileListText = document.getElementById("fileList").value;
    var renameEnabled = document.getElementById("renameOption").checked;
    var newFileName = document.getElementById("newFileName").value;
    
    if (!sourceFolder || !destinationFolder) {
        alert("移動元と移動先のフォルダを指定してください。");
        return;
    }
    
    if (!fileListText.trim()) {
        alert("移動するファイルがありません。");
        return;
    }
    
    if (renameEnabled && (!newFileName || !newFileName.trim())) {
        alert("リネーム機能を有効にした場合は、新しいファイル名を入力してください。");
        return;
    }
    
    var fileNames = fileListText.split("\n").filter(function(name) {
        return name.trim() !== "";
    });
    
    if (fileNames.length === 0) {
        alert("移動するファイルがありません。");
        return;
    }
    
    try {
        // 移動先フォルダが存在しない場合は作成
        if (!fso.FolderExists(destinationFolder)) {
            if (destinationFolder.indexOf("\\") === -1) {
                // パス区切りがない場合は日付フォルダとして処理
                var parentFolder = document.getElementById("destinationFolder").value;
                var dateFolder = getCurrentDate().replace(/\//g, "-");
                destinationFolder = parentFolder + "\\" + dateFolder;
            }
            
            createFolderRecursive(destinationFolder);
        }
        
        var successCount = 0;
        var errorMessages = [];
        var fileCounter = 1;
        
        for (var i = 0; i < fileNames.length; i++) {
            var fileName = fileNames[i].trim();
            if (!fileName) continue;
            
            var sourcePath = sourceFolder + "\\" + fileName;
            var destinationPath;
            
            if (!fso.FileExists(sourcePath)) {
                errorMessages.push("ファイルが見つかりません: " + fileName);
                continue;
            }
            
            // ファイル名の決定
            if (renameEnabled) {
                var extension = fso.GetExtensionName(fileName);
                var baseNewName = newFileName.trim();
                var finalFileName;
                
                if (fileNames.length === 1) {
                    // ファイルが1個の場合は連番なし
                    finalFileName = extension ? baseNewName + "." + extension : baseNewName;
                } else {
                    // 複数ファイルの場合は連番付き
                    finalFileName = extension ? baseNewName + " (" + fileCounter + ")." + extension : baseNewName + " (" + fileCounter + ")";
                }
                
                destinationPath = destinationFolder + "\\" + finalFileName;
                fileCounter++;
            } else {
                destinationPath = destinationFolder + "\\" + fileName;
            }
            
            // 重複チェック（リネーム無効時のみ）
            if (!renameEnabled && fso.FileExists(destinationPath)) {
                errorMessages.push("ファイルが既に存在します: " + fileName + "\n（リネーム機能を有効にしてください）");
                continue;
            }
            
            try {
                fso.MoveFile(sourcePath, destinationPath);
                successCount++;
            } catch (e) {
                errorMessages.push("移動に失敗しました: " + fileName + " (" + e.message + ")");
            }
        }
        
        // 結果表示
        var message = successCount + "個のファイルの移動が完了しました。";
        if (errorMessages.length > 0) {
            message += "\n\nエラー:\n" + errorMessages.join("\n");
        }
        alert(message);
        
        // 移動後にリスト更新
        updateFileList();
        
    } catch (e) {
        alert("移動処理中にエラーが発生しました: " + e.message);
    }
}

// フォルダ再帰作成
function createFolderRecursive(folderPath) {
    var pathParts = folderPath.split("\\");
    var currentPath = "";
    
    for (var i = 0; i < pathParts.length; i++) {
        if (i === 0) {
            currentPath = pathParts[i];
        } else {
            currentPath += "\\" + pathParts[i];
        }
        
        if (currentPath.length > 3 && !fso.FolderExists(currentPath)) {
            fso.CreateFolder(currentPath);
        }
    }
}

// 重複ファイル名の処理（リネーム）
function getUniqueFileName(folderPath, fileName) {
    var baseName = fso.GetBaseName(fileName);
    var extension = fso.GetExtensionName(fileName);
    var counter = 1;
    var newFileName = fileName;
    
    while (fso.FileExists(folderPath + "\\" + newFileName)) {
        if (extension) {
            newFileName = baseName + "(" + counter + ")." + extension;
        } else {
            newFileName = baseName + "(" + counter + ")";
        }
        counter++;
    }
    
    return folderPath + "\\" + newFileName;
}
</script>
</body>
</html>
